{"ast":null,"code":"import axios from 'axios';\nimport { Toast } from 'vant';\nimport store from '@/store';\n// 创建axios实例 将对创建出来的的axios实例进行配置\n// 好处不会污染原始axios实例\nconst instance = axios.create({\n  baseURL: 'http://cba.itlike.com/public/index.php?s=/api/',\n  timeout: 5000\n});\n\n// 自定义配置 --请求响应拦截器\ninstance.interceptors.request.use(function (config) {\n  // 在发送请求之前做些什么\n  // 开启lodaing，禁止背景带点击（节流防止多次点击）\n  Toast.loading({\n    message: '加载中',\n    forbidClick: true\n    // duration: 0\n  });\n  // 只要有token，就在请求时携带，便于请求需要授权的接口\n  const token = store.getters.token;\n  if (token) {\n    config.headers['Access-Token'] = token;\n    config.headers.platform = 'H5';\n  }\n  return config;\n}, function (error) {\n  // 对请求错误做些什么\n  return Promise.reject(error);\n});\n\n// 添加响应拦截器,优先考虑正逻辑，通过响应拦截器来对请求出现的错误的情况抛出异常\ninstance.interceptors.response.use(function (response) {\n  // 2xx 范围内的状态码都会触发该函数。\n  // 对响应数据做点什么(默认axios会多包装一层data，需要响应拦截器中处理一下)\n  const res = response.data;\n  // console.log(res)\n  if (res.status !== 200) {\n    // 如果验证错误，给出提示\n    Toast(res.message);\n    // 抛出错误的promise\n    return Promise.reject(res.message);\n  } else {\n    // 正确路径\n    Toast.clear();\n  }\n  return res;\n}, function (error) {\n  // 超出 2xx 范围的状态码都会触发该函数。\n  // 对响应错误做点什么\n  return Promise.reject(error);\n});\n\n// 导出配置\nexport default instance;","map":{"version":3,"names":["axios","Toast","store","instance","create","baseURL","timeout","interceptors","request","use","config","loading","message","forbidClick","token","getters","headers","platform","error","Promise","reject","response","res","data","status","clear"],"sources":["D:/vue/vue-demo/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport { Toast } from 'vant'\r\nimport store from '@/store'\r\n// 创建axios实例 将对创建出来的的axios实例进行配置\r\n// 好处不会污染原始axios实例\r\nconst instance = axios.create({\r\n  baseURL: 'http://cba.itlike.com/public/index.php?s=/api/',\r\n  timeout: 5000\r\n})\r\n\r\n// 自定义配置 --请求响应拦截器\r\ninstance.interceptors.request.use(function (config) {\r\n  // 在发送请求之前做些什么\r\n  // 开启lodaing，禁止背景带点击（节流防止多次点击）\r\n  Toast.loading({\r\n    message: '加载中',\r\n    forbidClick: true\r\n    // duration: 0\r\n  })\r\n  // 只要有token，就在请求时携带，便于请求需要授权的接口\r\n  const token = store.getters.token\r\n  if (token) {\r\n    config.headers['Access-Token'] = token\r\n    config.headers.platform = 'H5'\r\n  }\r\n  return config\r\n}, function (error) {\r\n  // 对请求错误做些什么\r\n  return Promise.reject(error)\r\n})\r\n\r\n// 添加响应拦截器,优先考虑正逻辑，通过响应拦截器来对请求出现的错误的情况抛出异常\r\ninstance.interceptors.response.use(function (response) {\r\n  // 2xx 范围内的状态码都会触发该函数。\r\n  // 对响应数据做点什么(默认axios会多包装一层data，需要响应拦截器中处理一下)\r\n  const res = response.data\r\n  // console.log(res)\r\n  if (res.status !== 200) {\r\n    // 如果验证错误，给出提示\r\n    Toast(res.message)\r\n    // 抛出错误的promise\r\n    return Promise.reject(res.message)\r\n  } else {\r\n    // 正确路径\r\n    Toast.clear()\r\n  }\r\n  return res\r\n}, function (error) {\r\n  // 超出 2xx 范围的状态码都会触发该函数。\r\n  // 对响应错误做点什么\r\n  return Promise.reject(error)\r\n})\r\n\r\n// 导出配置\r\nexport default instance\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,MAAM;AAC5B,OAAOC,KAAK,MAAM,SAAS;AAC3B;AACA;AACA,MAAMC,QAAQ,GAAGH,KAAK,CAACI,MAAM,CAAC;EAC5BC,OAAO,EAAE,gDAAgD;EACzDC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAH,QAAQ,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,UAAUC,MAAM,EAAE;EAClD;EACA;EACAT,KAAK,CAACU,OAAO,CAAC;IACZC,OAAO,EAAE,KAAK;IACdC,WAAW,EAAE;IACb;EACF,CAAC,CAAC;EACF;EACA,MAAMC,KAAK,GAAGZ,KAAK,CAACa,OAAO,CAACD,KAAK;EACjC,IAAIA,KAAK,EAAE;IACTJ,MAAM,CAACM,OAAO,CAAC,cAAc,CAAC,GAAGF,KAAK;IACtCJ,MAAM,CAACM,OAAO,CAACC,QAAQ,GAAG,IAAI;EAChC;EACA,OAAOP,MAAM;AACf,CAAC,EAAE,UAAUQ,KAAK,EAAE;EAClB;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;;AAEF;AACAf,QAAQ,CAACI,YAAY,CAACc,QAAQ,CAACZ,GAAG,CAAC,UAAUY,QAAQ,EAAE;EACrD;EACA;EACA,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAAI;EACzB;EACA,IAAID,GAAG,CAACE,MAAM,KAAK,GAAG,EAAE;IACtB;IACAvB,KAAK,CAACqB,GAAG,CAACV,OAAO,CAAC;IAClB;IACA,OAAOO,OAAO,CAACC,MAAM,CAACE,GAAG,CAACV,OAAO,CAAC;EACpC,CAAC,MAAM;IACL;IACAX,KAAK,CAACwB,KAAK,CAAC,CAAC;EACf;EACA,OAAOH,GAAG;AACZ,CAAC,EAAE,UAAUJ,KAAK,EAAE;EAClB;EACA;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;;AAEF;AACA,eAAef,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}